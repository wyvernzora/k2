---
- name: Load K3s leader node info
  become: no
  delegate_to: localhost
  include_vars:
    file: .state/k3s-leader.yaml

- name: Create K3S config directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 644
  with_items:
    - /etc/rancher/k3s

- name: Write K3s config file
  template:
    src: k3s.config.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: 644

- name: Write K3S env file
  template:
    src: ../../../templates/k3s.env.j2
    dest: /etc/rancher/k3s/k3s.env
    owner: root
    group: root
    mode: 600
  vars:
    envars:
      K3S_TOKEN: "{{ node_token }}"

- name: Create k3s service
  template:
    src: ../../../templates/k3s.service.j2
    dest: /etc/init.d/k3s
    owner: root
    group: root
    mode: 755
  vars:
    k3s_command: agent

- name: Set up log rotation
  copy:
    src: ../../../files/k3s.logrotate
    dest: /etc/logrotate.d/k3s

- name: Start K3S service
  service:
    name: k3s
    enabled: yes
    state: restarted
    runlevel: default

- name: Wait for worker nodes to join cluster
  run_once: yes
  delegate_to: "{{ hostvars[inventory_hostname].k3s_leader.host }}"
  remote_user: "{{ hostvars[inventory_hostname].k3s_leader.user }}"
  command:
    cmd: k3s kubectl get nodes -l "!node-role.kubernetes.io/master" -o=jsonpath="{.items[*].metadata.name}"
  register: __workers
  until: __workers.rc == 0 and (__workers.stdout.split() | length) == (ansible_play_hosts_all | length)
  retries: "{{ retry_count | default(20) }}"
  delay: 10
  changed_when: false
