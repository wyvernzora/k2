---
# Source: reflector/charts/reflector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reflector
  namespace: k2-core
  labels:
    helm.sh/chart: reflector-7.1.262
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "7.1.262"
    app.kubernetes.io/managed-by: Helm
---
# Source: reflector/charts/reflector/templates/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reflector
  namespace: k2-core
  labels:
    helm.sh/chart: reflector-7.1.262
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "7.1.262"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["watch", "list"]
---
# Source: reflector/charts/reflector/templates/clusterRoleBinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: reflector
  namespace: k2-core
  labels:
    helm.sh/chart: reflector-7.1.262
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "7.1.262"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  name: reflector
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: reflector
    namespace: k2-core
---
# Source: reflector/charts/reflector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reflector
  namespace: k2-core
  labels:
    helm.sh/chart: reflector-7.1.262
    app.kubernetes.io/name: reflector
    app.kubernetes.io/instance: reflector
    app.kubernetes.io/version: "7.1.262"
    app.kubernetes.io/managed-by: Helm

spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reflector
      app.kubernetes.io/instance: reflector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reflector
        app.kubernetes.io/instance: reflector

    spec:
      serviceAccountName: reflector
      securityContext:
        fsGroup: 2000
      priorityClassName: system-cluster-critical
      containers:
        - name: reflector
          securityContext:
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          image: "emberstack/kubernetes-reflector:7.1.262"
          imagePullPolicy: IfNotPresent
          env:
            - name: ES_Serilog__MinimumLevel__Default
              value: "Information"
            - name: ES_Reflector__Watcher__Timeout
              value: ""
            - name: ES_Reflector__Kubernetes__SkipTlsVerify
              value: "false"

          ports:
            - name: http
              containerPort: 25080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /healthz
              port: http
            failureThreshold: 10
            periodSeconds: 5
          resources:
            {}
