apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-critical
  namespace: k2-storage
description: Ensure Longhorn pods have the highest priority to prevent any unexpected eviction by the Kubernetes scheduler under node pressure
globalDefault: false
preemptionPolicy: PreemptLowerPriority
value: 1000000000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-service-account
  namespace: k2-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-ui-service-account
  namespace: k2-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-support-bundle
  namespace: k2-storage
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-default-setting
  namespace: k2-storage
data:
  default-setting.yaml: "priority-class: longhorn-critical"
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-storageclass
  namespace: k2-storage
data:
  storageclass.yaml: |
    kind: StorageClass
    apiVersion: storage.k8s.io/v1
    metadata:
      name: longhorn
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
    provisioner: driver.longhorn.io
    allowVolumeExpansion: true
    reclaimPolicy: "Delete"
    volumeBindingMode: Immediate
    parameters:
      numberOfReplicas: "3"
      staleReplicaTimeout: "30"
      fromBackup: ""
      fsType: "ext4"
      dataLocality: "disabled"
      unmapMarkSnapChainRemoved: "ignored"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-role
  namespace: k2-storage
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - pods
      - events
      - persistentvolumes
      - persistentvolumeclaims
      - persistentvolumeclaims/status
      - nodes
      - proxy/nodes
      - pods/log
      - secrets
      - services
      - endpoints
      - configmaps
      - serviceaccounts
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - statefulsets
      - deployments
    verbs:
      - "*"
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - "*"
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
      - podsecuritypolicies
    verbs:
      - "*"
  - apiGroups:
      - scheduling.k8s.io
    resources:
      - priorityclasses
    verbs:
      - watch
      - list
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
      - volumeattachments
      - volumeattachments/status
      - csinodes
      - csidrivers
    verbs:
      - "*"
  - apiGroups:
      - snapshot.storage.k8s.io
    resources:
      - volumesnapshotclasses
      - volumesnapshots
      - volumesnapshotcontents
      - volumesnapshotcontents/status
    verbs:
      - "*"
  - apiGroups:
      - longhorn.io
    resources:
      - volumes
      - volumes/status
      - engines
      - engines/status
      - replicas
      - replicas/status
      - settings
      - engineimages
      - engineimages/status
      - nodes
      - nodes/status
      - instancemanagers
      - instancemanagers/status
      - sharemanagers
      - sharemanagers/status
      - backingimages
      - backingimages/status
      - backingimagemanagers
      - backingimagemanagers/status
      - backingimagedatasources
      - backingimagedatasources/status
      - backuptargets
      - backuptargets/status
      - backupvolumes
      - backupvolumes/status
      - backups
      - backups/status
      - recurringjobs
      - recurringjobs/status
      - orphans
      - orphans/status
      - snapshots
      - snapshots/status
      - supportbundles
      - supportbundles/status
      - systembackups
      - systembackups/status
      - systemrestores
      - systemrestores/status
      - volumeattachments
      - volumeattachments/status
      - backupbackingimages
      - backupbackingimages/status
    verbs:
      - "*"
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - "*"
  - apiGroups:
      - metrics.k8s.io
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
  - apiGroups:
      - apiregistration.k8s.io
    resources:
      - apiservices
    verbs:
      - list
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs:
      - get
      - list
      - create
      - patch
      - delete
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
      - clusterrolebindings
      - clusterroles
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-bind
  namespace: k2-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: longhorn-role
subjects:
  - kind: ServiceAccount
    name: longhorn-service-account
    namespace: k2-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-support-bundle
  namespace: k2-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: longhorn-support-bundle
    namespace: k2-storage
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: longhorn-manager
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-backend
  namespace: k2-storage
spec:
  ports:
    - name: manager
      port: 9500
      targetPort: manager
  selector:
    app: longhorn-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: longhorn-ui
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-frontend
  namespace: k2-storage
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app: longhorn-ui
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: longhorn-conversion-webhook
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-conversion-webhook
  namespace: k2-storage
spec:
  ports:
    - name: conversion-webhook
      port: 9501
      targetPort: conversion-wh
  selector:
    app: longhorn-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: longhorn-admission-webhook
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-admission-webhook
  namespace: k2-storage
spec:
  ports:
    - name: admission-webhook
      port: 9502
      targetPort: admission-wh
  selector:
    app: longhorn-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: longhorn-recovery-backend
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-recovery-backend
  namespace: k2-storage
spec:
  ports:
    - name: recovery-backend
      port: 9503
      targetPort: recov-backend
  selector:
    app: longhorn-manager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-engine-manager
  namespace: k2-storage
spec:
  clusterIP: None
  selector:
    longhorn.io/component: instance-manager
    longhorn.io/instance-manager-type: engine
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-replica-manager
  namespace: k2-storage
spec:
  clusterIP: None
  selector:
    longhorn.io/component: instance-manager
    longhorn.io/instance-manager-type: replica
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: longhorn-manager
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-manager
  namespace: k2-storage
spec:
  selector:
    matchLabels:
      app: longhorn-manager
  template:
    metadata:
      labels:
        app: longhorn-manager
        app.kubernetes.io/instance: longhorn
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: longhorn
        app.kubernetes.io/version: v1.6.1
        helm.sh/chart: longhorn-1.6.1
    spec:
      containers:
        - command:
            - longhorn-manager
            - -d
            - daemon
            - --engine-image
            - longhornio/longhorn-engine:v1.6.1
            - --instance-manager-image
            - longhornio/longhorn-instance-manager:v1.6.1
            - --share-manager-image
            - longhornio/longhorn-share-manager:v1.6.1
            - --backing-image-manager-image
            - longhornio/backing-image-manager:v1.6.1
            - --support-bundle-manager-image
            - longhornio/support-bundle-kit:v0.0.36
            - --manager-image
            - longhornio/longhorn-manager:v1.6.1
            - --service-account
            - longhorn-service-account
            - --upgrade-version-check
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          image: longhornio/longhorn-manager:v1.6.1
          imagePullPolicy: IfNotPresent
          name: longhorn-manager
          ports:
            - containerPort: 9500
              name: manager
            - containerPort: 9501
              name: conversion-wh
            - containerPort: 9502
              name: admission-wh
            - containerPort: 9503
              name: recov-backend
          readinessProbe:
            httpGet:
              path: /v1/healthz
              port: 9501
              scheme: HTTPS
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /host/dev/
              name: dev
            - mountPath: /host/proc/
              name: proc
            - mountPath: /var/lib/longhorn/
              mountPropagation: Bidirectional
              name: longhorn
            - mountPath: /tls-files/
              name: longhorn-grpc-tls
      priorityClassName: longhorn-critical
      serviceAccountName: longhorn-service-account
      volumes:
        - hostPath:
            path: /dev/
          name: dev
        - hostPath:
            path: /proc/
          name: proc
        - hostPath:
            path: /var/lib/longhorn/
          name: longhorn
        - name: longhorn-grpc-tls
          secret:
            optional: true
            secretName: longhorn-grpc-tls
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-driver-deployer
  namespace: k2-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: longhorn-driver-deployer
  template:
    metadata:
      labels:
        app: longhorn-driver-deployer
        app.kubernetes.io/instance: longhorn
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: longhorn
        app.kubernetes.io/version: v1.6.1
        helm.sh/chart: longhorn-1.6.1
    spec:
      containers:
        - command:
            - longhorn-manager
            - -d
            - deploy-driver
            - --manager-image
            - longhornio/longhorn-manager:v1.6.1
            - --manager-url
            - http://longhorn-backend:9500/v1
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
            - name: CSI_ATTACHER_IMAGE
              value: longhornio/csi-attacher:v4.4.2
            - name: CSI_PROVISIONER_IMAGE
              value: longhornio/csi-provisioner:v3.6.2
            - name: CSI_NODE_DRIVER_REGISTRAR_IMAGE
              value: longhornio/csi-node-driver-registrar:v2.9.2
            - name: CSI_RESIZER_IMAGE
              value: longhornio/csi-resizer:v1.9.2
            - name: CSI_SNAPSHOTTER_IMAGE
              value: longhornio/csi-snapshotter:v6.3.2
            - name: CSI_LIVENESS_PROBE_IMAGE
              value: longhornio/livenessprobe:v2.12.0
          image: longhornio/longhorn-manager:v1.6.1
          imagePullPolicy: IfNotPresent
          name: longhorn-driver-deployer
      initContainers:
        - command:
            - sh
            - -c
            - while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1) != "200" ]; do echo waiting; sleep 2; done
          image: longhornio/longhorn-manager:v1.6.1
          name: wait-longhorn-manager
      priorityClassName: longhorn-critical
      securityContext:
        runAsUser: 0
      serviceAccountName: longhorn-service-account
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: longhorn-ui
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-ui
  namespace: k2-storage
spec:
  replicas: 2
  selector:
    matchLabels:
      app: longhorn-ui
  template:
    metadata:
      labels:
        app: longhorn-ui
        app.kubernetes.io/instance: longhorn
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: longhorn
        app.kubernetes.io/version: v1.6.1
        helm.sh/chart: longhorn-1.6.1
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - longhorn-ui
                topologyKey: kubernetes.io/hostname
              weight: 1
      containers:
        - env:
            - name: LONGHORN_MANAGER_IP
              value: http://longhorn-backend:9500
            - name: LONGHORN_UI_PORT
              value: "8000"
          image: longhornio/longhorn-ui:v1.6.1
          imagePullPolicy: IfNotPresent
          name: longhorn-ui
          ports:
            - containerPort: 8000
              name: http
          volumeMounts:
            - mountPath: /var/cache/nginx/
              name: nginx-cache
            - mountPath: /var/config/nginx/
              name: nginx-config
            - mountPath: /var/run/
              name: var-run
      priorityClassName: longhorn-critical
      serviceAccountName: longhorn-ui-service-account
      volumes:
        - emptyDir: {}
          name: nginx-cache
        - emptyDir: {}
          name: nginx-config
        - emptyDir: {}
          name: var-run
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: k2-auth-authelia@kubernetescrd
  labels:
    app: longhorn-ingress
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-ingress
  namespace: k2-storage
spec:
  rules:
    - host: lh.wyvernzora.io
      http:
        paths:
          - backend:
              service:
                name: longhorn-frontend
                port:
                  number: 80
            path: /
            pathType: ImplementationSpecific
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-post-upgrade
  namespace: k2-storage
spec:
  activeDeadlineSeconds: 900
  backoffLimit: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: longhorn
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: longhorn
        app.kubernetes.io/version: v1.6.1
        helm.sh/chart: longhorn-1.6.1
      name: longhorn-post-upgrade
    spec:
      containers:
        - command:
            - longhorn-manager
            - post-upgrade
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: longhornio/longhorn-manager:v1.6.1
          imagePullPolicy: IfNotPresent
          name: longhorn-post-upgrade
      priorityClassName: longhorn-critical
      restartPolicy: OnFailure
      serviceAccountName: longhorn-service-account
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation,hook-failed
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-pre-upgrade
  namespace: k2-storage
spec:
  activeDeadlineSeconds: 900
  backoffLimit: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: longhorn
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: longhorn
        app.kubernetes.io/version: v1.6.1
        helm.sh/chart: longhorn-1.6.1
      name: longhorn-pre-upgrade
    spec:
      containers:
        - command:
            - longhorn-manager
            - pre-upgrade
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: longhornio/longhorn-manager:v1.6.1
          imagePullPolicy: IfNotPresent
          name: longhorn-pre-upgrade
      restartPolicy: OnFailure
      serviceAccountName: longhorn-service-account
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/instance: longhorn
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: longhorn
    app.kubernetes.io/version: v1.6.1
    helm.sh/chart: longhorn-1.6.1
  name: longhorn-uninstall
  namespace: k2-storage
spec:
  activeDeadlineSeconds: 900
  backoffLimit: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: longhorn
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: longhorn
        app.kubernetes.io/version: v1.6.1
        helm.sh/chart: longhorn-1.6.1
      name: longhorn-uninstall
    spec:
      containers:
        - command:
            - longhorn-manager
            - uninstall
            - --force
          env:
            - name: LONGHORN_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: longhornio/longhorn-manager:v1.6.1
          imagePullPolicy: IfNotPresent
          name: longhorn-uninstall
      priorityClassName: longhorn-critical
      restartPolicy: Never
      serviceAccountName: longhorn-service-account
